@page "/kulijob"
@using KuliJob;
@using KuliJob.Storages;
@inject IJobStorage jobStorage;

@functions {
    [FromQuery(Name = "page")]
    public int PageIndex { get; set; } = 1;

    [FromQuery(Name = "job-state")]
    public string? FilterJobState { get; set; }

    public IEnumerable<KuliJob.Job>? Jobs { get; set; }

    public async Task OnGetAsync()
    {
        KuliJob.JobState? jobState = null;
        if (Enum.TryParse<JobState>(FilterJobState, out var result))
        {
            jobState = result;
        }
        Jobs = await jobStorage.GetLatestJobs(PageIndex, 25, jobState);
    }
}

@{
    ViewData["Title"] = "Jobs";
}

<h3>Jobs</h3>

@{
    var filterJobs = new string[] { "All", "Created", "Retry", "Active", "Completed", "Cancelled", "Failed" };
    var selectedJobState = filterJobs.SingleOrDefault(v => string.Equals(FilterJobState, v,
    StringComparison.InvariantCultureIgnoreCase));
    selectedJobState ??= filterJobs[0];
}

<ul class="nav nav-tabs">
    @foreach (var jobState in filterJobs)
    {
        var isActive = selectedJobState == jobState;
        <li class="nav-item">
            <a class="nav-link @(isActive ? "active" : "")" aria-current="page"
                href="?page=@(PageIndex)&job-state=@jobState">@jobState</a>
        </li>
    }
</ul>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">State</th>
            <th scope="col">Job Name</th>
            <th scope="col">Scheduled At</th>
            <th scope="col">Error</th>
            <th scope="col">Parameter</th>
        </tr>
    </thead>
    <tbody>
        @if (Jobs != null)
        {
            @foreach (var job in Jobs)
            {
                <tr>
                    <td>@job.Id</td>
                    <td>
                        @if (job.JobState == JobState.Active)
                        {
                            <span class="badge bg-info text-dark">@job.JobState</span>
                        }
                        else if (job.JobState == JobState.Retry)
                        {
                            <span class="badge bg-warning text-dark">@job.JobState</span>
                        }
                        else if (job.JobState == JobState.Completed)
                        {
                            <span class="badge bg-success">@job.JobState</span>
                        }
                        else if (job.JobState == JobState.Failed)
                        {
                            <span class="badge bg-danger">@job.JobState</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">@job.JobState</span>
                        }
                    </td>
                    <td>@job.JobName</td>
                    <td>@job.StartAfter</td>
                    @* <td>@job.FailedMessage</td> *@
                    <td><span>
                            @job.JobData
                        </span></td>
                </tr>
            }
        }
    </tbody>
</table>

<ul class="pagination">
    <li class="page-item">
        <a class="page-link @(PageIndex == 1 ? "disabled" : "")"
            href="?page=@(Math.Max(PageIndex - 1, 1))&job-state=@(selectedJobState)" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
        </a>
    </li>
    <li class="page-item">
        <a class="page-link" href="?page=@(PageIndex + 1)&job-state=@(selectedJobState)" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
        </a>
    </li>
</ul>